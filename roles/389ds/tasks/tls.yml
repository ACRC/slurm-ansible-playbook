---

- name: create CA key
  openssl_privatekey:
    path: /root/CA_key.pem
  register: _ca_key

- name: create the CA CSR
  openssl_csr:
    path: /root/CA.csr
    privatekey_path: "{{ _ca_key.filename }}"
    common_name: "citc-ca"
  register: _ca_csr

- name: sign the CA CSR
  openssl_certificate:
    path: /root/CA.crt
    csr_path: "{{ _ca_csr.filename }}"
    privatekey_path: "{{ _ca_key.filename }}"
    provider: selfsigned
  register: _ca_crt

- name: create mgmt CSR signing key
  openssl_privatekey:
    path: /root/mgmt_host_key.pem
  register: _mgmt_key

- name: create the CSR for the LDAP server
  openssl_csr:
    path: /root/mgmt.csr
    privatekey_path: "{{ _mgmt_key.filename }}"
    common_name: "{{ mgmt_hostname }}"
    subject_alt_name: 'DNS:{{ ansible_fqdn }},DNS:{{ ansible_hostname }}'
  register: _mgmt_csr

- name: sign the CSR for the LDAP server
  openssl_certificate:
    path: /root/mgmt.crt
    csr_path: "{{ _mgmt_csr.filename }}"
    provider: ownca
    ownca_path: "{{ _ca_crt.filename }}"
    ownca_privatekey_path: "{{ _ca_key.filename }}"
  register: mgmt_crt

- name: install python2-pip
  package:
    name: python2-pip
    state: present

- name: Ensure python OpenSSL dependencies are installed.
  pip:
    name: pyOpenSSL
    state: present

- name: Generate PKCS#12 file
  openssl_pkcs12:
    action: export
    path: /root/mgmt.p12
    friendly_name: mgmt
    privatekey_path: "{{ _mgmt_key.filename }}"
    certificate_path: "{{ mgmt_crt.filename }}"
    other_certificates: "{{ mgmt_crt.ca_cert }}"
    state: present
  register: mgmt_crt_p12

- name: import certificates
  command: certutil -A -d /etc/dirsrv/slapd-{{ mgmt_hostname }}/ -n "{{ item.name }}" -t "{{ item.trust_args }}" -i "{{ item.path }}" # noqa 301
  loop:
    - name: ca_cert
      trust_args: "C,,"
      path: "{{ mgmt_crt.ca_cert }}"
    - name: Server-Cert
      trust_args: ",,"
      path: "{{ mgmt_crt.filename }}"

- name: import certificates
  command: pk12util -d /etc/dirsrv/slapd-{{ mgmt_hostname }}/ -i {{ mgmt_crt_p12.filename }} -W "" # noqa 301

- name: turn on nsslapd-security
  ldap_attr:
    server_uri: ldap://localhost
    bind_dn: cn=Directory Manager
    bind_pw: "{{ ldap_dm_password }}"
    dn: cn=config
    name: nsslapd-security
    values: "on"
    state: exact

- name: set ssh encryption options
  ldap_attr:
    server_uri: ldap://localhost
    bind_dn: cn=Directory Manager
    bind_pw: "{{ ldap_dm_password }}"
    dn: cn=encryption,cn=config
    name: "{{ item.key }}"
    values: "{{ item.value }}"
    state: exact
  with_dict:
    nsSSLSessionTimeout: 0
    nsSSLClientAuth: "off"
    nsSSL3: "off"
    nsSSL2: "off"

- name: ensure RSA encryption object exists
  ldap_entry:
    dn: cn=RSA,cn=encryption,cn=config
    objectClass:
      - top
      - nsEncryptionModule
    bind_dn: cn=Directory Manager
    bind_pw: "{{ ldap_dm_password }}"
    server_uri: ldap://localhost

- name: set ssh encryption options
  ldap_attr:
    server_uri: ldap://localhost
    bind_dn: cn=Directory Manager
    bind_pw: "{{ ldap_dm_password }}"
    dn: cn=RSA,cn=encryption,cn=config
    name: "{{ item.key }}"
    values: "{{ item.value }}"
    state: exact
  with_dict:
    nsSSLPersonalitySSL: Server-Cert
    nsSSLToken: internal (software)
    nsSSLActivation: "on"
