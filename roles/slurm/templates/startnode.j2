#! /opt/oci/bin/python

import base64
import logging
import re
import subprocess
import sys
import time
from typing import Dict

import oci
import yaml


def load_yaml(filename) -> dict:
    with open(filename, "r") as f:
        return yaml.safe_load(f)

def get_startnode_config() -> Dict[str, Dict[str, str]]:
    return load_yaml("/etc/citc/startnode.yaml")

def get_subnet(compartment_id: str, vcn_id: str, ad_number: str) -> str:
    return subnet = [s.id for s in oci.core.VirtualNetworkClient(oci_config).list_subnets(compartment_id, vcn_id=vcn).data if s.display_name == f"SubnetAD{ad_number}"][0]

def get_images() -> Dict[str, Dict[str, str]]:
    """
    From https://docs.cloud.oracle.com/iaas/images/
    """
    return {
        "Oracle-Linux-7.6-Gen2-GPU-2019.02.20-0": {
            "ca-toronto-1": "ocid1.image.oc1.ca-toronto-1.aaaaaaaayeivcqwwqnuo6qkz2fwpmskhcwrlhxgwaibqbhwwkohepnlyxk5q",
            "eu-frankfurt-1": "ocid1.image.oc1.eu-frankfurt-1.aaaaaaaayupoeyifqy7a6gyup3axhtnidjvfptj55e34bzgt7m7bv3gwv3wa",
            "uk-london-1": "ocid1.image.oc1.uk-london-1.aaaaaaaap5kk2lbo5lj3k5ff5tl755a4cszjwd6zii7jlcp6nz3gogh54wtq",
            "us-ashburn-1": "ocid1.image.oc1.iad.aaaaaaaab5l5wv7njknupfxvyynplhsygdz67uhfaz35nsnhsk3ufclqjaea",
            "us-phoenix-1": "ocid1.image.oc1.phx.aaaaaaaahu7hv6lqbdyncgwehipwsuh3htfuxcoxbl4arcetx6hzixft366a",
        },
        "Oracle-Linux-7.6-2019.02.20-0": {
            "ca-toronto-1": "ocid1.image.oc1.ca-toronto-1.aaaaaaaa7ac57wwwhputaufcbf633ojir6scqa4yv6iaqtn3u64wisqd3jjq",
            "eu-frankfurt-1": "ocid1.image.oc1.eu-frankfurt-1.aaaaaaaa527xpybx2azyhcz2oyk6f4lsvokyujajo73zuxnnhcnp7p24pgva",
            "uk-london-1": "ocid1.image.oc1.uk-london-1.aaaaaaaarruepdlahln5fah4lvm7tsf4was3wdx75vfs6vljdke65imbqnhq",
            "us-ashburn-1": "ocid1.image.oc1.iad.aaaaaaaannaquxy7rrbrbngpaqp427mv426rlalgihxwdjrz3fr2iiaxah5a",
            "us-phoenix-1": "ocid1.image.oc1.phx.aaaaaaaacss7qgb6vhojblgcklnmcbchhei6wgqisqmdciu3l4spmroipghq",
        },
    }

def handle_exception(exc_type, exc_value, exc_traceback):
    if issubclass(exc_type, KeyboardInterrupt):
        sys.__excepthook__(exc_type, exc_value, exc_traceback)
        return

    log.critical("Uncaught exception", exc_info=(exc_type, exc_value, exc_traceback))


sys.excepthook = handle_exception

log = logging.getLogger("startnode")
log.setLevel(logging.INFO)
handler = logging.FileHandler('/var/log/slurm/elastic.log')
formatter = logging.Formatter('%(asctime)s %(name)-10s %(levelname)-8s %(message)s')
handler.setFormatter(formatter)
log.addHandler(handler)

startnode_config = get_startnode_config()

compartment_id = startnode_config["compartment_id"]
region = startnode_config["region"]
vcn = startnode_config["vcn_id"]
ad_root = startnode_config["ad_root"]

keys_file = "/home/slurm/opc_authorized_keys"

oci_config = oci.config.from_file()

with open(keys_file) as kf:
    ssh_keys = kf.read()

hosts = subprocess.run(["scontrol", "show", "hostnames", sys.argv[1]], stdout=subprocess.PIPE).stdout.decode().split()

for host in hosts:
    log.info(f"Starting {host}")

    # TODO Check if node is already running

    features = subprocess.run(["sinfo",  "--Format=features:200", "--noheader", f"--nodes={host}"], stdout=subprocess.PIPE).stdout.decode().split(',')
    ad_number = [f for f in features if f.startswith("ad=")][0].split("=")[1].strip()
    shape = [f for f in features if f.startswith("shape=")][0].split("=")[1].strip()
    subnet = get_subnet(compartment_id, vcn, ad_number)
    image_name = "Oracle-Linux-7.6-Gen2-GPU-2019.02.20-0" if "GPU" in shape else "Oracle-Linux-7.6-2019.02.20-0"
    image = get_images()[image_name][region]
    ad = f"{ad_root}{ad_number}"

    host_dns_match = re.match(r"(\d+\.){3}\d+", subprocess.run(["host", host], stdout=subprocess.PIPE).stdout.decode().split()[-1])
    dns_ip = host_dns_match.group(0) if host_dns_match else None

    slurm_dns_match = re.search(r"NodeAddr=((\d+\.){3}\d+)", subprocess.run(["scontrol", "show", "node", host], stdout=subprocess.PIPE).stdout.decode())
    slurm_ip = slurm_dns_match.group(1) if slurm_dns_match else None

    ip = dns_ip or slurm_ip

    with open("/home/slurm/bootstrap.sh", "rb") as f:
        user_data = base64.b64encode(f.read()).decode()

    instance_details = oci.core.models.LaunchInstanceDetails(
        compartment_id=compartment_id,
        availability_domain=ad,
        shape=shape,
        subnet_id=subnet,
        image_id=image,
        display_name=host,
        hostname_label=host,
        create_vnic_details=oci.core.models.CreateVnicDetails(private_ip=ip, subnet_id=subnet) if ip else None,
        metadata={
            "ssh_authorized_keys": ssh_keys,
            "user_data": user_data,
        }
    )

    try:
        instance = oci.core.ComputeClient(oci_config).launch_instance(instance_details)
    except oci.exceptions.ServiceError as e:
        log.error(f" problem launching instance: {e}")
        continue

    node_id = instance.data.id

    if not slurm_ip:
        while not oci.core.ComputeClient(oci_config).list_vnic_attachments(compartment_id, instance_id=node_id).data:
            log.info(" No VNIC attachment yet. Waiting...")
            time.sleep(5)

        vnic_id = oci.core.ComputeClient(oci_config).list_vnic_attachments(compartment_id, instance_id=node_id).data[0].vnic_id
        private_ip = oci.core.VirtualNetworkClient(oci_config).get_vnic(vnic_id).data.private_ip

        log.info(f"  Private IP {private_ip}")
        subprocess.run(["scontrol", "update", f"NodeName={host}", f"NodeAddr={private_ip}"])

    log.info(f" Started {host}")
