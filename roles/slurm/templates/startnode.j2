#! /opt/oci/bin/python

import base64
import logging
import re
import subprocess
import sys
import time

import oci

log = logging.getLogger(__name__)

log.setLevel(logging.INFO)
handler = logging.FileHandler('/var/log/slurm/elastic.log')
#handler = logging.StreamHandler()
formatter = logging.Formatter('%(asctime)s %(name)-12s %(levelname)-8s %(message)s')
handler.setFormatter(formatter)
log.addHandler(handler)

config = oci.config.from_file()

compartment_id = "{{ compartment_ocid }}"

keys_file = "/home/slurm/opc_authorized_keys"

ad_root = oci.core.ComputeClient(config).list_instances(compartment_id, display_name="mgmt").data[0].availability_domain[:-1]  # TODO exclude terminated instances

vcn = [n for n in oci.core.VirtualNetworkClient(config).list_vcns(compartment_id).data if n.display_name == "ClusterVCN"][0].id

with open(keys_file) as kf:
    ssh_keys = kf.read().replace("\n", "\\n")

hosts = subprocess.run(["scontrol", "show", "hostnames", sys.argv[1]], stdout=subprocess.PIPE).stdout.decode().split()

for host in hosts:
    log.info(f"Starting {host}")

    features = subprocess.run(["sinfo",  "--Format=features:200", "--noheader", f"--nodes={host}"], stdout=subprocess.PIPE).stdout.decode().split(',')
    ad_number = [f for f in features if f.startswith("ad=")][0].split("=")[1].strip()
    shape = [f for f in features if f.startswith("shape=")][0].split("=")[1].strip()
    subnet = [s for s in oci.core.VirtualNetworkClient(config).list_subnets(compartment_id, vcn_id=vcn).data if s.display_name == f"SubnetAD{ad_number}"][0].id
    image = "ocid1.image.oc1.eu-frankfurt-1.aaaaaaaa527xpybx2azyhcz2oyk6f4lsvokyujajo73zuxnnhcnp7p24pgva"
    ad = f"{ad_root}{ad_number}"

    host_dns_match = re.match(r"(\d+\.){3}\d+", subprocess.run(["host", host], stdout=subprocess.PIPE).stdout.decode().split()[-1])
    dns_ip = host_dns_match.group(0) if host_dns_match else None

    slurm_dns_match = re.search(r"NodeAddr=((\d+\.){3}\d+)", subprocess.run(["scontrol", "show", "node", host], stdout=subprocess.PIPE).stdout.decode())
    slurm_ip = slurm_dns_match.group(1) if slurm_dns_match else None

    ip = dns_ip or slurm_ip

    with open("/home/slurm/bootstrap.sh", "rb") as f:
        user_data = base64.b64encode(f.read()).decode()

    instance_details = oci.core.models.LaunchInstanceDetails(
        compartment_id=compartment_id,
        availability_domain=ad,
        shape=shape,
        subnet_id=subnet,
        image_id=image,
        display_name=host,
        hostname_label=host,
        create_vnic_details=oci.core.models.CreateVnicDetails(private_ip=ip, subnet_id=subnet) if ip else None,
        metadata={
            "ssh_authorized_keys": ssh_keys,
            "user_data": user_data,
        }
    )

    instance = oci.core.ComputeClient(config).launch_instance(instance_details)

    node_id = instance.data.id

    if not slurm_ip:
        trying = True
        while not oci.core.ComputeClient(config).list_vnic_attachments(compartment_id, instance_id=node_id).data:
            log.info(" No VNIC attachment yet. Waiting...")
            time.sleep(5)

        vnic_id = oci.core.ComputeClient(config).list_vnic_attachments(compartment_id, instance_id=node_id).data[0].vnic_id
        private_ip = oci.core.VirtualNetworkClient(config).get_vnic(vnic_id).data.private_ip

        log.info(f"  Private IP {private_ip}")
        subprocess.run(["scontrol", "update", f"NodeName={host}", f"NodeAddr={private_ip}"])

    log.info(f" Started {host}")
